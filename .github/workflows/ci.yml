name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/backend

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Clean test DB
        run: rm -f test.db

      # Crea el esquema vía SQLAlchemy (evita "no such table" en SQLite)
      - name: Init schema (SQLAlchemy Base.create_all)
        env:
          PYTHONPATH: "${{ github.workspace }}:${{ github.workspace }}/apps:${{ github.workspace }}/apps/backend"
          DATABASE_URL: "sqlite:///./test.db"
        run: |
          python - <<'PY'
          import os
          os.environ.setdefault("DATABASE_URL", "sqlite:///./test.db")
          try:
              from app.db.base import Base
              from app.db.session import engine
          except ModuleNotFoundError:
              from apps.backend.app.db.base import Base
              from apps.backend.app.db.session import engine
          Base.metadata.create_all(bind=engine)
          print("✅ Schema creado en test.db")
          PY

      - name: Run tests
        env:
          PYTHONPATH: "${{ github.workspace }}:${{ github.workspace }}/apps:${{ github.workspace }}/apps/backend"
          DATABASE_URL: "sqlite:///./test.db"
          FRONTEND_URL: "http://localhost:8081"
          TENANT_NAMESPACE_UUID: "0280249e-6707-40fb-8d60-1e8f3aea0f8e"
          JWT_SECRET_KEY: "devsecretdevsecretdevsecret"
          IMPORTS_ENABLED: "1"
        run: pytest -q app/tests

      - name: Validate FE/BE endpoints
        env:
          PYTHONPATH: "${{ github.workspace }}:${{ github.workspace }}/apps:${{ github.workspace }}/apps/backend"
          DATABASE_URL: "sqlite:///./test.db"
        run: python ../../scripts/check_endpoints.py

  frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            apps/admin/package-lock.json
            apps/tenant/package-lock.json

      - name: Admin typecheck
        working-directory: apps/admin
        run: |
          npm ci
          npm run typecheck

      - name: Tenant typecheck
        working-directory: apps/tenant
        run: |
          npm ci
          npm run typecheck
